
trigger: # в данном блоке определяется, при каком событии запускать пайплайн
- master # запускаем, как только пришел новый коммит в ветку master

pool: # здесь определяем образ докера, в котором запускается приложение и версию интерпритатора
  vmImage: ubuntu-latest # выбираем ubuntu

variables:
  buildConfiguration: 'Release'

steps:
# - task: UseDotNet@2
#   displayName: 'Install .NET Core SDK'
#   inputs:
#     version: 6.0.x
#     performMultiLevelLookup: true
#     includePreviewVersions: true # Required for preview versions



# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'restore'
#     feedsToUse: 'select'
#     vstsFeed: 'my-vsts-feed' # A series of numbers and letters

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'build'
#     arguments: '--configuration $(buildConfiguration)'
#     projects: '**/*.csproj'
#   displayName: 'dotnet build $(buildConfiguration)'

- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'




# ...
# do this after other tasks such as building
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'


# ...
# do this after your tests have run
- script: dotnet test <test-project> --logger trx
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'





- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'myWebsiteName'


# ...
# do this after you've built your app, near the end of your pipeline in most cases
# for example, you do this before you deploy to an Azure web app on Windows
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True